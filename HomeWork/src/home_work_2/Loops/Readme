
    1.5. Вывести таблицу умножения в консоль. В консоли должно получиться также как и на картинке (динозаврика рисовать не надо): https://www.dropbox.com/s/ibakfuppvy2w32g/multiplication_table.jpeg?dl=0
2. Массивы:
	2.1. Создать класс ArraysUtils:
		2.1.1. Написать метод public static int[] arrayFromConsole() рядом с main. Данный метод размер массива и каждый его элемент запрашивает у пользователя через консоль.
			2.1.1.1. Пример int[] container = arrayFromConsole(). Результат: В методе arrayFromConsole будет запрошена информация у пользователя, пользователь вводит размер (3) и его элементы по порядку {4, 17, 32}. Соответсвенно будет создан массив размером 3 с элементами {4, 17, 32} и сохранён в переменную container.
		2.1.2. Написать метод public static int[] arrayRandom(int size, int maxValueExclusion) рядом с main. Данный метод принимает два аргумента. Первый (size) указывает размер массива который мы хотим получить. Второй (maxValueExclusion) указывает до какого числа генерировать рандомные числа.
			2.1.2.1. Пример: int[] container = arrayRandom(5, 100). Результат: В методе arrayRandom будет создан массив размером 5 с числами от 0 до 99 (использовать класс Random) и сохранён в переменную container.
	2.2 Перебор массива при помощи do....while, while, for, foreach. Элементы массива вводить используя ранее созданный arrayFromConsole. Все задачи в одном классе, в отдельных методах. Должно получиться 3 метода (что такое метод https://metanit.com/java/tutorial/2.7.php):
		2.2.1. Вывести все элементы в консоль.
		2.2.2. Вывести каждый второй элемент массива в консоль.
		2.2.3. Вывести все элементы массива в консоль в обратном порядке.
	2.3* Выполнить задание 2.2 иным способом. Создать интерфейс IArraysOperation с методами из задания. Написать 4 отдельных класса и реализовать данный интерфейс:
		2.3.1. DoWhileOperation - во всех методах можно использовать только do....while
		2.3.2. WhileOperation - во всех методах можно использовать только while
		2.3.3. ForOperation - во всех методах можно использовать только for
		2.3.4. ForEachOperation - во всех методах можно использовать только foreach
	2.4 Задачи взяты с сайта https://taskcode.ru/array. На сайте есть пояснения по каждой из этих задач. Все задачи в одном классе, в отдельных методах. Для создания массивов использовать ранее созданный arrayRandom.
		2.4.1. Сумма четных положительных элементов массива
		2.4.2. Максимальный из элементов массива с четными индексами
		2.4.3. Элементы массива, которые меньше среднего арифметического
		2.4.4. Найти два наименьших (минимальных) элемента массива
		2.4.5. Сжать массив, удалив элементы, принадлежащие интервалу
		2.4.6. Сумма цифр массива
3. Нарисовать блок схему алгоритма работы пузырьковой сортировки. Результат должен быть в гите. Сохранить следующие форматы файлов: (.drawio || .vsdx) && (.pdf || .svg)
	3.1. Что такое алгоритм https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC
	3.2. Прочитать про блок-схемы https://ru.wikipedia.org/wiki/%D0%91%D0%BB%D0%BE%D0%BA-%D1%81%D1%85%D0%B5%D0%BC%D0%B0
4.* Выполнить сортировку массива с числами:
	4.1. После каждой сортировки в консоли у вас должно получиться "[Какой массив был до сортировки] -> [Каким стал массив после сортировки]". Для преобразования массива в текст можно использовать класс Arrays.
	4.2. Создать класс SortsUtils. Пишем в нём следующие алгоритмы:
		4.2.1. Пузырьковая сортировка
		4.2.2. Шейкерная сортировка
	4.3. Для тестов используем предварительно созданные массивы (в коде ваши тесты должны остаться):
		4.3.1. {1,2,3,4,5,6}
		4.3.2. {1,1,1,1}
		4.3.3. {9,1,5,99,9,9}
		4.3.4. {}
	4.4. После тестов написать код который будет массив через ранее созданный arrayRandom. Отсортировать.
	4.5. После рандома написать код который будет создавать массив через ранее созданный arrayFromConsole. Отсортировать.

Далее задания выполнять только после прохождения темы "Тестирование"

5. Переделать задание 1, убрав оттуда точки входа, добавить класс для тестов протестировать примерами из задания и своими примерами обязательно.
6. Выполнить задание 2.3, добавить класс для тестов протестировать своими примерами обязательно.
7. Для заданий 2.4 написать тесты и протестировать различными своими примерами обязательно.
8. Протестировать класс SortsUtils из задания 4, добавить класс для тестов протестировать примерами из задания и своими примерами обязательно.