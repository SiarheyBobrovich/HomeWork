Изучаем: return, инкапсуляцию, наследование, переоределение, интефрейсы, композицию, делегирование, циклы, Math, операторы ветвления, паттерны*.

Суть задания:
	Написать различные варианты калькуляторов (несколько отдельных классов) которые делают одно и тоже различными способами (какой-то использует только собственные методы, какой-то обращается к библиотеке Math). Тем самым вы в полной мере испробуете инкапсуляцию, наследование.
	Изучить плюсы и минусы использование абстракции, интерфейсов.
	Изучить библиотеку (класс) Math из jdk. (https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html)
	Изучить работу с полями класса
	Изучить паттерны Декоратор, Компоновщик, Адаптер

Задания разделить по пакетам. Все классы с названием ****Main должны быть помещены в пакет runners.
Должно получиться так:

-home_work_3
	-calcs
		-simple
		....
	-runners
		....

Такое разделение классов позволяет лучше структурировать пакет и в будущем будет удобно их поддерживать.

Калькуляторы:

Для начала просто посчитаем выражения. Просто пишем как есть данные выражения, как в ДЗ с операторами. В комментарии напротив выражений нужно записать их результат, таким образом в будущем мы сможем сверить результат выполнения последующих задач.

1. Создать класс WithoutCalculatorMain в котором необходимо посчитать следующие выражения:
	1.1 4.1 + 15 * 7 + (28 / 5) ^ 2. Вывести сохранённый результат в консоль. Внимание, знак "^" обозначает возведение в степень.

Достаточно простые выражения, с которыми, на данный момент, проблем уже не должно возникать. Давайте больше структурировать наш код. В будущем это позволит довольно быстро и безболезненно увеличивать функциональность приложения.

Последующие классы калькуляторов должны быть созданы в пакете calcs.simple