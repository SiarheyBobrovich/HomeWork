package home_work_3.calcs.additional;

/*
    10*. Создать CalculatorWithMemory.
        10.1 Данный калькулятор предназначен для того чтобы расширить возможности калькулятора и обеспечить
             его дополнительной функцией памяти. В принципе работает как калькулятор из реальной жизни.
        10.2 Все методы объявленные в данном классе НЕ статические (не имеют модификатор static).
        10.3 Данный класс напрямую не умеет считать математику.
        10.4 В классе должны присутствовать математические методы:
            10.4.1 4 базовых математических метода (деление, умножение, вычитание, сложение).
            10.4.2 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа).
        10.5 Функция памяти работает через методы:
            10.5.1 Записать в память результат выполнения последнего вызванного метода.
                   У данного метода не должно быть параметров.
                   Данный метод вызывается непосредтвенно пользователем, а не автоматический.
            10.5.2 Получить из памяти записанное значение.
                При получении записи из памяти память стирается, при записи нового значения память перезаписывается.
                Данный метод вызывается непосредтвенно пользователем, а не автоматический.
 */

import home_work_3.calcs.api.ICalculator;

public class CalculatorWithMemory {

    private double memory;
    private double tmp;

    /**
     * Сохранить данные последнего вычисления
     */
    public void memory() {
        memory = tmp;
    }

    /**
     * Метод обнуляет сохранённые данные и возвращает их
     * @return возвращает сохранённое число
     */
    public double getMemory() {
        double tmp = memory;
        memory = 0;
        return tmp;
    }

    /**
     * Метод сложения двух чисел
     * @param a - первое слагаемое
     * @param b - второе слагаемое
     * @return результат выражения a + b
     */
    public double add(double a, double b) {
        return tmp = a + b;
    }

    /**
     * Метод вычитания одного числа из другого
     * @param a - Уменьшаемый аргумент
     * @param b - вычитаемый аргумент
     * @return результат выражения a - b
     */
    public double subtract(double a, double b) {
        return tmp = a - b;
    }

    /**
     * Метод умножения двух чисел
     * @param a - первый множитель
     * @param b - второй множитель
     * @return результат выражения a * b
     */
    public double multiply(double a, double b) {
        return tmp = a * b;
    }

    /**
     * Метод деления первого числа на второе
     * @param a - делимое (числитель)
     * @param b - делитель (знаменатель)
     * @return результат выражения a / b
     */
    public double divide(double a, double b) {
        return tmp = a / b;

    }

    public double pow(double a, long b) {
        return tmp = Math.pow(a, b);
    }

    public double sqrt(double a) {
        return tmp = Math.sqrt(a);
    }

    public double abs(double a) {
        return tmp = Math.abs(a);
    }


}
